Shader "ShaderName"
{ 
  // 可选,Pro code 用户可不写，Editor 用户用于快速反射 Inspector,
  // 适用于简单 UI 反射显示和默认值设置，想做的比较极致还需要编辑器开放 Shader UI 编辑定制能力
  EditorProperties 
  { 
    material_BaseColor("Offset unit scale", vec4) = (1,1,1,1);
    material_AlphaCutoff("Alpha cut off", Range(1,100)) = 10;
  }
  SubShader "SubShaderName" 
  {
    // 对应引擎 SubShader tags（可选） 
    Tags { ReplacementTag = "Opaque"} 

    Pass "PassName" 
    {
      // 对应引擎 ShaderPass tags（可选）
      Tags { PipelineStage = "Forward"} 

      // 对应引擎 BlendState（可选）
      BlendState = customBlendState;
      // 对应引擎 DepthState（可选）
      DepthState = customDepthState;
      // 对应引擎 StencilState（可选）
      stencilState = customStencilState;
      // 对应引擎 RasterState（可选）
      rasterState = customRasterState;

      // 必选
      VertexShader = customVertex;
      // 必选
      FragmentShader = customFragment;


      // #include 为引用关键字，可用路径描述，例如： "Asset/Light.glsl" 直接对应用户资产管理器路径
      #include "Light.glsl"

      struct Attributes
      {
        vec4 position;
        vec2 uv;
      };

      struct Varyings
      {
        float2 uv;
        float fogCoord;
      }

      vec4 material_BaseColor;
      float material_AlphaCutoff;
      sampler2D material_BaseTexture;
  
      BlendFactor srcBlend;
      BlendFactor dstBlend;

      // 属性值可以固定，也可以通过属性传入
      BlendState customBlendState
      {
        Enabled = true;
        SrcColorBlendFactor = _SrcBlend;
        DestColorBlendFactor = _DstBlend;
      }

      Varyings customVertex(Attributes input){
        Varyings varying;
        varying.uv = vec2(1.0,1.0);
        gl_Position = vec4(1.0,1.0,1.0,1.0);
        rerurn varying;
      }

      void customFragment(Varyings input){
        gl_FragColor = vec4(1.0,1.0,1.0,1.0);
      }
    };
    Pass "PassName"
    {
       Tags { PipelineStage = "ShadowCaster"} 
      ......
    }
  };
  SubShader "SubShaderName" 
  {
    ......
  }
}